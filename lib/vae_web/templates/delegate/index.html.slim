= if length(@delegates) == 0 do
  = render("no-results.html")
- else
  section.section#title
    .container
      = link("Villes de la région #{@administrative}", to: Routes.delegate_path(@conn, :geo, Vae.String.parameterize(@administrative)), class: "button is-back")
      h1.title.is-1 #{Vae.String.inflect("Certificateur", length(@delegates))} VAE à #{@city}, #{@administrative}
      / form method="get" class="toggler"
      /   = for {key, value} <- Map.delete(@conn.query_params, "levels") do
      /     input type="hidden" name=key value=value
      /   input type="hidden" name="levels"
      /   - possible_levels = 1..5 |> Enum.to_list()
      /   - is_all = possible_levels == @levels
      /   ul
      /     li
      /       input type="checkbox" value="all" id="all_levels" checked=is_all
      /       label.button.is-rounded.is-info.is-togglable for="all_levels"
      /         | Toutes les équivalences
      /     = for level <- possible_levels |> Enum.reverse() do
      /       li
      /         input type="checkbox" value=level id="level_#{level}" checked=(!is_all && Enum.member?(@levels, level))
      /         label.button.is-rounded.is-info.is-togglable for="level_#{level}"
      /           = level_info_by_level(level)
  section.section#results
    .container
      = for chunk <- Enum.chunk_every(@delegates, 3) do
        .columns
          = for delegate <- chunk do
            .column.is-4 style="display: flex;"
              = render VaeWeb.ComponentView, "delegate-card.html", conn: @conn, delegate: delegate

= render VaeWeb.ComponentView, "pagination.html", conn: @conn, page: @page, path: &Routes.delegate_path/3

