= form_for @conn, search_path(@conn, :search), [as: :search, id: "rome_form", class: "dm-search-box d-flex flex-md-row flex-column align-items-stretch text-left"], fn f ->
  .input-group.suggest
    = search_input(f, :query, class: "form-control form-control-lg", required: true, value: Plug.Conn.get_session(@conn, :search_query), placeholder: 'Essayez "Assistante maternelle"')
    = hidden_input(f, :profession, value: Plug.Conn.get_session(@conn, :search_profession))
    = hidden_input(f, :rome_code, value: Plug.Conn.get_session(@conn, :search_rome))
    = hidden_input(f, :certification, value: Plug.Conn.get_session(@conn, :search_certification))
  .input-group.geolocation
    = search_input(f, :geolocation_text, class: "form-control form-control-lg", required: true, value: Plug.Conn.get_session(@conn, :search_geo), placeholder: 'Essayez "Paris"')
    = hidden_input(f, :lat, value: Plug.Conn.get_session(@conn, :search_lat))
    = hidden_input(f, :lng, value: Plug.Conn.get_session(@conn, :search_lng))
    = hidden_input(f, :county, value: Plug.Conn.get_session(@conn, :search_county))
    = hidden_input(f, :postcode, value: Plug.Conn.get_session(@conn, :search_postcode))
    = hidden_input(f, :administrative, value: Plug.Conn.get_session(@conn, :search_administrative))
  = submit class: "btn btn-outline-primary btn-lg d-flex align-items-center justify-content-center my-md-0 my-2", title: 'Valider la recherche' do
    span.ic-icon.ic-zoom-bold
= render Vae.ComponentView, "places", conn: @conn, prefix: "search", tag: "geolocation_text", type: "city"
= render Vae.ComponentView, "searchbar_variables"
javascript:
  var client = algoliasearch(window.algolia_app_id, window.algolia_search_api_key);
  var professions = client.initIndex('profession');
  var certifications = client.initIndex('certification');
  var romes = client.initIndex('rome');
  autocomplete('#search_query', {
    autoselect: true,
    autoselectOnBlur: true,
    cssClasses: {
      prefix: 'ap'
    }
  }, [{
    source: autocomplete.sources.hits(professions, { hitsPerPage: 4, queryType: 'prefixAll' }),
    displayKey: function(suggestion) {
      var label = suggestion.label;
      return label;
    },
    templates: {
      header: '<h5 class="m-0 ap-suggestions-category">Métiers</div>',
      suggestion: function(suggestion) {
        var label = suggestion._highlightResult.label.value;
        return label;
      }
    }
  }, {
    source: autocomplete.sources.hits(certifications, { hitsPerPage: 3, queryType: 'prefixAll' }),
    displayKey: function(suggestion) {
      var acronym = suggestion.acronym;
      var label = suggestion.label;
      return acronym ? `${acronym} ${label}` : label;
    },
    templates: {
      header: '<h5 class="m-0 ap-suggestions-category">Dîplomes</div>',
      suggestion: function(suggestion) {
        var acronym = suggestion._highlightResult.acronym && suggestion._highlightResult.acronym.value;
        var label = suggestion._highlightResult.label.value;
        return acronym ? `${acronym} ${label}` : label;
      }
    }
  }, {
    source: autocomplete.sources.hits(romes, { hitsPerPage: 1, queryType: 'prefixAll' }),
    displayKey: function(suggestion) {
      var code = suggestion.code;
      var label = suggestion.label;
      return `${label} (${code})`;
    },
    templates: {
      header: '<h5 class="m-0 ap-suggestions-category">Romes</div>',
      suggestion: function(suggestion) {
        var code = suggestion._highlightResult.code.value;
        var label = suggestion._highlightResult.label.value;
        return `${label} (${code})`;
      }
    }
  }]).on('autocomplete:selected', function(event, suggestion, dataset) {
    if(dataset === 1) {
      $('#search_rome_code').val(suggestion.rome_code);
      $('#search_certification').val('');
    }
    if(dataset === 3) {
      $('#search_rome_code').val(suggestion.code);
      $('#search_certification').val('');
    }
    if(dataset === 2) {
      $('#search_rome_code').val('');
      $('#search_certification').val(suggestion.id);
    }
  });
